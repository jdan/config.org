#+title: Org-mode configuration

This is my emacs config as a literate org-mode file.

Load it with =(org-babel-load-file "~/.emacs.d/path/to/config.org")= in =init.el=

Thanks to [[https://www.youtube.com/watch?v=SzA2YODtgK4&t=1236s][Harry Schwartz for the inspiration]].

* Org-mode

Log when tasks are done

#+BEGIN_SRC emacs-lisp 
  (setq org-log-done t)
#+END_SRC

* LaTeX

Make sure you install LaTeX and some extras with

=sudo apt-get install texlive texlive-latex-extra=

Then initialize latex support in emacs.

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
	       '("article"
		 "\\documentclass{article}"
		 ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC

Add syntax highlighting using the =minted= package.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

* Babel

Support a few languages

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ruby . t)
     (python . t)
     (J . t)))
#+END_SRC

Auto-confirm evals

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Set the theme

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes (quote (wombat))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC

* Lean

Initialize packages. This is not specific to lean and should probably move.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize) ; You might already have this line
  (global-set-key (kbd "S-SPC") #'company-complete)
#+END_SRC

* Windmove

Use the default keybindings (S-<arrow>)

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

Make windmove work in Org mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
* Capture

Set up captures to find a home in =notes.org=

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

Set up a =C-c x= to capture notes

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c x")
    (lambda () (interactive) (org-capture nil "t")))
#+END_SRC
* Eval-buffer

Set F5 to `eval-buffer`, which is useful for my koans work but might
prove useful later.

#+BEGIN_SRC emacs-lisp
  (global-set-key [f5] 'eval-buffer)
#+END_SRC
* MELPA

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

* j-mode

When we open an .ijs file, start =jconsole= in a pane on the right.

#+BEGIN_SRC emacs-lisp
  (defun j-hooks ()
    (interactive)
    (split-window-horizontally)
    (j-console)
    (windmove-left)
    ; Hmmmm for some reason it changes my buffer to *scratch*
    (previous-buffer))

  (add-hook 'j-mode-hook 'j-hooks)
#+END_SRC

After evaluating a line, move the cursor back to the file.

Unsure if we need an entire *hook* for this, but it works :)

#+BEGIN_SRC emacs-lisp
  (defun execute-line-and-go-back ()
    (interactive)
    (j-console-execute-line)
    (windmove-left))

  (defun set-keys ()
    (local-set-key (kbd "C-c C-l") 'execute-line-and-go-back))
  
  (add-hook 'j-mode-hook 'set-keys)
#+END_SRC
